% This MATLAB code for deep model learning and performance evaluation
run lpinet
imds = imageDatastore('dataset-CWD-50','IncludeSubfolders',true,'LabelSource','foldernames');
[imdsTrain,imdsTest,imdsVal] = splitEachLabel(imds,0.7,0.15,'randomized');
imdsTrain.Labels    = categorical(imdsTrain.Labels);
imdsTest.Labels     = categorical(imdsTest.Labels);
imdsVal.Labels      = categorical(imdsVal.Labels);

% training options configuration
batchSize   = 256;
ValFre      = fix(length(imdsTrain.Files)/batchSize)
options = trainingOptions('sgdm', ...
    'MiniBatchSize',batchSize, ...
    'MaxEpochs',20, ...
    'Shuffle','every-epoch',...
    'InitialLearnRate',0.01, ...
    'LearnRateSchedule','piecewise',...
    'LearnRateDropPeriod',8,...
    'LearnRateDropFactor',0.1,...
    'ValidationData',imdsVal, ...
    'ValidationFrequency',ValFre, ...
    'ValidationPatience',Inf, ...
    'Verbose',true ,...
    'VerboseFrequency',ValFre,...
    'Plots','training-progress',...
    'ExecutionEnvironment','multi-gpu');

% train the model with the imdsTrain set and validate with the imdsVal set.
trainednet = trainNetwork(imdsTrain,lgraph,options);

% predict the imdsTest set
YPred = classify(trainednet,imdsTest,'MiniBatchSize',128,'ExecutionEnvironment','gpu');
YTest = imdsTest.Labels;
accuracy = sum(YPred == YTest)/numel(YTest)

% save model
save('trained_lpinet.mat','trainednet')

% Note: the trained model with learned parameters is further provided.
